<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="clr-namespace:VisFileManager.Controls"
                    xmlns:animations="clr-namespace:VisFileManager.Animations"
                    xmlns:converters="clr-namespace:VisFileManager.Converters"
                    xmlns:PresentationOptions="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options" 
                    xmlns:dataTemplateSelectors="clr-namespace:VisFileManager.DataTemplateSelectors"
                    xmlns:extensions="clr-namespace:VisFileManager.Extensions"
                    xmlns:behaviors="clr-namespace:VisFileManager.Behaviors"
                    xmlns:tobii="clr-namespace:Tobii.Interaction.Wpf;assembly=Tobii.Interaction.Net"
                    xmlns:e="http://schemas.microsoft.com/xaml/behaviors"
                    xmlns:helpers="clr-namespace:VisFileManager.Helpers">

    <!-- COLORS AND BRUSHES-->

    <Color x:Key="DarkGreyColor" PresentationOptions:Freeze="True">#222629</Color>
    <Color x:Key="SemiDarkGreyColor" PresentationOptions:Freeze="True">#FF303234</Color>
    <Color x:Key="GreyColor" PresentationOptions:Freeze="True">#474B4F</Color>
    <Color x:Key="LightGreyColor" PresentationOptions:Freeze="True">#6B6E70</Color>

    <!--<Color x:Key="LightGreenColor" PresentationOptions:Freeze="True">#86C232</Color>-->
    <Color x:Key="LightGreenColor" PresentationOptions:Freeze="True">#6c8f21</Color>
    
    <Color x:Key="DarkGreenColor" PresentationOptions:Freeze="True">#61892F</Color>
    <Color x:Key="TextForegroundLightColor" PresentationOptions:Freeze="True">#FFFFFF</Color>
    <Color x:Key="TextForegroundDarkerColor" PresentationOptions:Freeze="True">#777777</Color>
    <Color x:Key="TextForegroundDisabledColor" PresentationOptions:Freeze="True">#444444</Color>
    <Color x:Key="EyeLogoBorderColor" PresentationOptions:Freeze="True">#FFFFFF</Color>
    <Color x:Key="EyeLogoIrisInnerColor" PresentationOptions:Freeze="True">#008000</Color>

    <SolidColorBrush x:Key="ApplicationBackgroundDarkBrush" Color="{StaticResource DarkGreyColor}" PresentationOptions:Freeze="True" />
    <SolidColorBrush x:Key="ApplicationBackgroundSemiDarkBrush" Color="{StaticResource SemiDarkGreyColor}" PresentationOptions:Freeze="True"/>
    <SolidColorBrush x:Key="ApplicationBackgroundNormalBrush" Color="{StaticResource GreyColor}" PresentationOptions:Freeze="True"/>
    <SolidColorBrush x:Key="ApplicationBackgroundLightBrush" Color="{StaticResource LightGreyColor}" PresentationOptions:Freeze="True"/>
    <SolidColorBrush x:Key="LightGreenBrush" Color="{StaticResource LightGreenColor}" PresentationOptions:Freeze="True"/>
    <SolidColorBrush x:Key="DarkGreenBrush" Color="{StaticResource DarkGreenColor}" PresentationOptions:Freeze="True"/>

    <SolidColorBrush x:Key="TextForegroundDarkerBrush" Color="{StaticResource TextForegroundDarkerColor}" PresentationOptions:Freeze="True"/>
    <SolidColorBrush x:Key="TextForegroundDisabledBrush" Color="{StaticResource TextForegroundDisabledColor}" PresentationOptions:Freeze="True"/>
    <SolidColorBrush x:Key="TextForegroundLightBrush" Color="{StaticResource TextForegroundLightColor}" PresentationOptions:Freeze="True"/>

    <SolidColorBrush x:Key="EyeLogoBorderBrush" Color="{StaticResource EyeLogoBorderColor}" PresentationOptions:Freeze="True"/>
    <SolidColorBrush x:Key="EyeLogoIrisOutsideBrush" Color="{StaticResource EyeLogoBorderColor}" PresentationOptions:Freeze="True"/>
    <SolidColorBrush x:Key="EyeLogoIrisInsideBrush" Color="{StaticResource EyeLogoIrisInnerColor}" PresentationOptions:Freeze="True"/>

    <SolidColorBrush x:Key="LoadingDots" PresentationOptions:Freeze="True">#7EC0EE</SolidColorBrush>

    <SolidColorBrush x:Key="KeyboardFocusListBoxItemBackground" Color="#44DCEBFE"/>
    
    <Color x:Key="ControlForeground" PresentationOptions:Freeze="True">#181818</Color>
    <Color x:Key="ControlReadOnlyForeground" PresentationOptions:Freeze="True">#f7f7f7</Color>
    <Color x:Key="ControlDisabledForeground" PresentationOptions:Freeze="True">#686868</Color>

    <Color x:Key="ControlBackground" PresentationOptions:Freeze="True">#f7f7f9</Color>
    <Color x:Key="ControlHoveredBackground" PresentationOptions:Freeze="True">#fafafc</Color>
    <Color x:Key="ControlFocusedBackground" PresentationOptions:Freeze="True">#fdfdff</Color>
    <Color x:Key="ControlReadOnlyBackground" PresentationOptions:Freeze="True">#494949</Color>
    <Color x:Key="ControlDisabledBackground" PresentationOptions:Freeze="True">#efeff2</Color>

    <Color x:Key="ControlBorder" PresentationOptions:Freeze="True">#d6d6d6</Color>
    <Color x:Key="ControlHoveredBorder" PresentationOptions:Freeze="True">#0BBAE0</Color>
    <Color x:Key="ControlFocusedBorder" PresentationOptions:Freeze="True">#6dc2ff</Color>
    <Color x:Key="ControlReadOnlyBorder" PresentationOptions:Freeze="True">#484848</Color>
    <Color x:Key="ControlDisabledBorder" PresentationOptions:Freeze="True">#787878</Color>

    <Color x:Key="HighlightColor" PresentationOptions:Freeze="True">#FF3F3F41</Color>

    <Color x:Key="ForegroundColor" PresentationOptions:Freeze="True">#FFF4F4F5</Color>


    <SolidColorBrush x:Key="HighlightColorBrush" Color="{StaticResource HighlightColor}" PresentationOptions:Freeze="True"/>
    <SolidColorBrush x:Key="ForegroundColorBrush" Color="{StaticResource ForegroundColor}" PresentationOptions:Freeze="True"/>



    <LinearGradientBrush x:Key="separatorBrush" EndPoint="1,0" PresentationOptions:Freeze="True">
        <GradientStop Color="{StaticResource DarkGreyColor}" Offset="0"/>
        <GradientStop Color="Transparent" Offset="0.5"/>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="buttonBackground" EndPoint="1,0" PresentationOptions:Freeze="True">
        <GradientStop Color="{StaticResource LightGreenColor}" Offset="0"/>
        <GradientStop Color="Transparent" Offset="0.5"/>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="itemsBrush" EndPoint="1,0" PresentationOptions:Freeze="True">
        <GradientStop Color="#61892F" Offset="0"/>
        <GradientStop Color="Transparent" Offset="0.5"/>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="itemsBrush2" EndPoint="1,0" PresentationOptions:Freeze="True">
        <GradientStop Color="#61892F" Offset="0"/>
        <GradientStop Color="Transparent" Offset="1"/>
    </LinearGradientBrush>


    <Color x:Key="Black" PresentationOptions:Freeze="True">#000000</Color>

    <LinearGradientBrush x:Key="buttonBackground2" EndPoint="1,0" PresentationOptions:Freeze="True">
        <GradientStop Color="{extensions:Opacity Opacity=50, Color={StaticResource LightGreenColor}}" Offset="0"/>
        <GradientStop Color="{extensions:Opacity Opacity=0, Color=Black}" Offset="0.5"/>
    </LinearGradientBrush>


    <!--CONVERTERS-->
    <BooleanToVisibilityConverter x:Key="bool2VisibilityConverter" />
    <converters:StringEmptyConverter x:Key="StringEmptyConverter"/>
    <converters:PercentageToMaxValueConverter x:Key="PercentageToMaxValueConverter"/>
    <converters:EnumToBoolConverter x:Key="EnumToBoolConverter"/>
    <converters:BoolToVisibilityInvertedConverter x:Key="BoolToVisibilityInvertedConverter"/>
    <converters:ToLowResImageConverter x:Key="toLowResImageConverter"/>
    <converters:PathToThumbnailConverter x:Key="pathToThumbnailConverter"/>
    <converters:NumberOfItemsToVisibilityConverter x:Key="numberOfItemsToVisibilityConverter"/>
    <converters:PathToFileNameOnlyConverter x:Key="pathToFileNameOnlyConverter"/>

    <!-- TEMPLATE SELECTORS -->
    <dataTemplateSelectors:DetailsActionItemDataTemplateSelector x:Key="DetailsActionItemDataSelector"/>
    <dataTemplateSelectors:DetailsItemDataTemplateSelector x:Key="DetailsItemDataSelector"/>
    <dataTemplateSelectors:SpecificFileTypeDetailsTemplateSelector x:Key="SpecificFileTypeDetailsSelector"/>
    <dataTemplateSelectors:GridViewItemDataTemplateSelector x:Key="GridViewItemSelector"/>
    <dataTemplateSelectors:ListViewItemDataTemplateSelector x:Key="ListViewItemSelector"/>


    <Storyboard x:Key="EnterHoverAnimation">
        <animations:BrushAnimation Storyboard.TargetName="Bd"
                        Storyboard.TargetProperty="Background"
                        To="#BB000000" Duration="0:0:0.3"/>
    </Storyboard>

    <Storyboard x:Key="ExitHoverAnimation">
        <animations:BrushAnimation Storyboard.TargetName="Bd"
                        Storyboard.TargetProperty="Background"
                       To="Transparent" Duration="0:0:0.2"/>
    </Storyboard>

    <Storyboard x:Key="EnterKeyboardFocusAnimation">
        <animations:BrushAnimation Storyboard.TargetName="Bd"
                                   Storyboard.TargetProperty="Background"
                                   To="{StaticResource KeyboardFocusListBoxItemBackground}" Duration="0:0:0.1"/>
    </Storyboard>

    <Storyboard x:Key="ExitKeyboardFocusAnimation">
        <animations:BrushAnimation Storyboard.TargetName="Bd"
                        Storyboard.TargetProperty="Background"
                       To="Transparent" Duration="0:0:0.1"/>
    </Storyboard>

    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="0" SnapsToDevicePixels="true" Stroke="{StaticResource LightGreenBrush}" StrokeThickness="1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
 
    <SolidColorBrush x:Key="Item.SelectedInactive.Border" Color="#FFDADADA"/>
    
    <SolidColorBrush x:Key="Item.SelectedActive.Border" Color="#FF84ACDD"/>
    <Style x:Key="ListBoxItemContainerStyle" TargetType="{x:Type ListBoxItem}">
        <!--<Setter Property="tobii:Behaviors.IsActivatable" Value="True"/>-->
      
        <!--<Setter Property="tobii:Behaviors.IsTentativeFocusEnabled" Value="True"/>-->
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="0,0,10,10"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <!--<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>-->
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    
                    <Border x:Name="Bd" Margin="0" Background="{TemplateBinding Background}" BorderThickness="2" SnapsToDevicePixels="True">
                        <!--<e:Interaction.Behaviors>
                            <behaviors:ActivationBehavior ActivationTimeInMs="300" UseTemplatedParent="True" PrimaryKeyCommand="{Binding OpenCommand}" SecondaryKeyCommand="{Binding OpenPropertiesCommand}"/>
                        </e:Interaction.Behaviors>-->
                        
                        <!--<Border.Style>
                            <Style TargetType="Border">
                                <Style.Triggers>
                                    <Trigger Property="tobii:Behaviors.HasGaze" Value="True">
                                        <Setter Property="Background" Value="Magenta" />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </Border.Style>-->
                        <ContentPresenter x:Name="cp" HorizontalAlignment="Center" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=Content.HasGaze, ElementName=cp}" Value="True">
                            <!--<Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource LightGreenBrush}"/>
                            <Setter Property="BorderThickness" TargetName="Bd" Value="3"/>-->
                            <DataTrigger.EnterActions>
                                <RemoveStoryboard BeginStoryboardName="MouseOverEnterAnimation"/>
                                <RemoveStoryboard BeginStoryboardName="MouseOverExitAnimation"/>
                                <RemoveStoryboard BeginStoryboardName="GazeOverExitAnimation"/>
                                <RemoveStoryboard BeginStoryboardName="KeyboardFocusExitAnimation"/>
                                <RemoveStoryboard BeginStoryboardName="KeyboardFocusEnterAnimation"/>
                                
                                <BeginStoryboard x:Name="GazeOverEnterAnimation" Storyboard="{StaticResource EnterHoverAnimation}" HandoffBehavior="Compose"/>

                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>

                                <RemoveStoryboard BeginStoryboardName="MouseOverEnterAnimation"/>
                                <RemoveStoryboard BeginStoryboardName="MouseOverExitAnimation"/>
                                <RemoveStoryboard BeginStoryboardName="GazeOverEnterAnimation"/>
                                <RemoveStoryboard BeginStoryboardName="KeyboardFocusExitAnimation"/>
                                <RemoveStoryboard BeginStoryboardName="KeyboardFocusEnterAnimation"/>
                                <BeginStoryboard x:Name="GazeOverExitAnimation" Storyboard="{StaticResource ExitHoverAnimation}" HandoffBehavior="Compose"/>

                            </DataTrigger.ExitActions>
                        </DataTrigger>
                        
                        <Trigger Property="IsMouseOver" Value="True">
                            
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource LightGreenBrush}"/>
                            <Setter Property="BorderThickness" TargetName="Bd" Value="2"/>
                            <Trigger.EnterActions>

                                <RemoveStoryboard BeginStoryboardName="MouseOverExitAnimation"/>
                                <RemoveStoryboard BeginStoryboardName="GazeOverEnterAnimation"/>
                                <RemoveStoryboard BeginStoryboardName="GazeOverExitAnimation"/>
                                <RemoveStoryboard BeginStoryboardName="KeyboardFocusExitAnimation"/>
                                <RemoveStoryboard BeginStoryboardName="KeyboardFocusEnterAnimation"/>
                                <BeginStoryboard x:Name="MouseOverEnterAnimation" Storyboard="{StaticResource EnterHoverAnimation}" HandoffBehavior="Compose"/>

                            </Trigger.EnterActions>

                            <Trigger.ExitActions>
                                <RemoveStoryboard BeginStoryboardName="MouseOverEnterAnimation"/>
                                <RemoveStoryboard BeginStoryboardName="GazeOverEnterAnimation"/>
                                <RemoveStoryboard BeginStoryboardName="GazeOverExitAnimation"/>
                                <RemoveStoryboard BeginStoryboardName="KeyboardFocusExitAnimation"/>
                                <RemoveStoryboard BeginStoryboardName="KeyboardFocusEnterAnimation"/>
                                <BeginStoryboard x:Name="MouseOverExitAnimation" Storyboard="{StaticResource ExitHoverAnimation}" HandoffBehavior="Compose"/>

                            </Trigger.ExitActions>
                        </Trigger>
                        
                        
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Border}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <RemoveStoryboard BeginStoryboardName="MouseOverEnterAnimation"/>
                                <RemoveStoryboard BeginStoryboardName="MouseOverExitAnimation"/>
                                <RemoveStoryboard BeginStoryboardName="GazeOverEnterAnimation"/>
                                <RemoveStoryboard BeginStoryboardName="GazeOverExitAnimation"/>
                                <RemoveStoryboard BeginStoryboardName="KeyboardFocusExitAnimation"/>
                                
                                <BeginStoryboard x:Name="KeyboardFocusEnterAnimation" Storyboard="{StaticResource EnterKeyboardFocusAnimation}" HandoffBehavior="Compose"/>
                            </MultiTrigger.EnterActions>
                            
                            <MultiTrigger.ExitActions>

                                <RemoveStoryboard BeginStoryboardName="MouseOverEnterAnimation"/>
                                <RemoveStoryboard BeginStoryboardName="MouseOverExitAnimation"/>
                                <RemoveStoryboard BeginStoryboardName="GazeOverEnterAnimation"/>
                                <RemoveStoryboard BeginStoryboardName="GazeOverExitAnimation"/>
                                <RemoveStoryboard BeginStoryboardName="KeyboardFocusEnterAnimation"/>
                                
                                <BeginStoryboard x:Name="KeyboardFocusExitAnimation" Storyboard="{StaticResource ExitKeyboardFocusAnimation}" HandoffBehavior="Compose"/>
                            </MultiTrigger.ExitActions>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Border}"/>
                        </MultiTrigger>
                        
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="GridViewStyleGenericTemplate" TargetType="{x:Type ItemsControl}">
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <controls:VirtualizingWrapPanel Orientation="Vertical" VirtualizingPanel.ScrollUnit="Item" VirtualizingPanel.CacheLengthUnit="Page" VirtualizingPanel.CacheLength="10"
                               VerticalAlignment="Top" HorizontalAlignment="Left" VirtualizingPanel.IsVirtualizing="True"  ItemHeight="130" ItemWidth="130"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplateSelector" Value="{StaticResource GridViewItemSelector}"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource ListBoxItemContainerStyle}"/>
    </Style>

    <Style x:Key="GridViewStyleMyComputerTemplate" TargetType="{x:Type ItemsControl}">
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <controls:VirtualizingWrapPanel Orientation="Vertical"
                               VerticalAlignment="Top" HorizontalAlignment="Left" VirtualizingPanel.IsVirtualizing="True"  ItemHeight="120" ItemWidth="220"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="ItemTemplateSelector" Value="{StaticResource GridViewItemSelector}"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource ListBoxItemContainerStyle}"/>
    </Style>

    <Style x:Key="ListViewStyleTemplate" TargetType="{x:Type ItemsControl}">
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel VirtualizingPanel.IsVirtualizing="True"  VerticalAlignment="Top" HorizontalAlignment="Left">
                        <e:Interaction.Behaviors>
                            <behaviors:StackPanelResize/>
                        </e:Interaction.Behaviors>
                    </VirtualizingStackPanel>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="ItemTemplateSelector" Value="{StaticResource ListViewItemSelector}"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource ListBoxItemContainerStyle}"/>
    </Style>

    <Style x:Key="RadioButtonStyle" TargetType="{x:Type RadioButton}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Path Width="20" Height="17" Margin="0,0,5,0" VerticalAlignment="Center" HorizontalAlignment="Center"  x:Name="optionMark" Opacity="0" Stretch="Fill" Fill="{StaticResource DarkGreenBrush}" Data="F1 M 23.7501,33.25L 34.8334,44.3333L 52.2499,22.1668L 56.9999,26.9168L 34.8334,53.8333L 19.0001,38L 23.7501,33.25 Z "/>
                        <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="False" TextBlock.FontSize="16" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="Padding" Value="4,-1,0,0"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource TextForegroundLightBrush}"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource LightGreenBrush}"/>
                            <Setter Property="Opacity" TargetName="optionMark" Value="0.8"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="templateRoot" Value="0.56"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                            <Setter Property="TextBlock.FontWeight" Value="Bold"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0.56"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--CHECKBOX STYLE-->
    <Style x:Key="CheckBoxFocusVisual">
        <Setter Property="TextBlock.Foreground" Value="Red"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="0" SnapsToDevicePixels="true" Stroke="White" StrokeThickness="0"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CheckBoxStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource CheckBoxFocusVisual}"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="BorderBrush" Value="{StaticResource ApplicationBackgroundNormalBrush}"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border CornerRadius="15" UseLayoutRounding="True" SnapsToDevicePixels="True" ClipToBounds="True" Height="30" Width="30" x:Name="checkBoxBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid x:Name="markGrid">
                                <Border CornerRadius="13" x:Name="indeterminateMark" Background="{TemplateBinding TextElement.Foreground}" Margin="1" Opacity="0"/>
                                <Path x:Name="optionMark" Margin="8" VerticalAlignment="Center" HorizontalAlignment="Center" Stretch="Fill" Data="F1 M 23.7501,33.25L 34.8334,44.3333L 52.2499,22.1668L 56.9999,26.9168L 34.8334,53.8333L 19.0001,38L 23.7501,33.25 Z " Fill="{TemplateBinding TextElement.Foreground}"  Opacity="0" />
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" Content="{TemplateBinding Content}" TextBlock.FontSize="16" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="10,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="Padding" Value="4,-1,0,0"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource ApplicationBackgroundDarkBrush}"/>
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="White"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource LightGreenBrush}"/>
                            <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="templateRoot" Value="0.56"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Fill" TargetName="optionMark" Value="White"/>
                            <Setter Property="Background" TargetName="indeterminateMark" Value="{StaticResource DarkGreenBrush}"/>
                            <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="0.56"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="CheckBoxStyleSquared" TargetType="{x:Type CheckBox}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource CheckBoxFocusVisual}"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="BorderBrush" Value="{StaticResource ApplicationBackgroundNormalBrush}"/>
        <Setter Property="BorderThickness" Value="1,2,2,2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border UseLayoutRounding="True" SnapsToDevicePixels="True" ClipToBounds="True" Height="25" Width="25" x:Name="checkBoxBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="0" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid x:Name="markGrid">
                                <Border x:Name="indeterminateMark" Background="{TemplateBinding TextElement.Foreground}" Margin="0" Opacity="0"/>
                                <Path x:Name="optionMark" Margin="5" VerticalAlignment="Center" HorizontalAlignment="Center" Stretch="Fill" Data="F1 M 23.7501,33.25L 34.8334,44.3333L 52.2499,22.1668L 56.9999,26.9168L 34.8334,53.8333L 19.0001,38L 23.7501,33.25 Z " Fill="{TemplateBinding TextElement.Foreground}"  Opacity="0" />
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" Content="{TemplateBinding Content}" TextBlock.FontSize="14" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="5,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="Padding" Value="4,-1,0,0"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{StaticResource ApplicationBackgroundDarkBrush}"/>
                            <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="White"/>
                            <Setter Property="Fill" TargetName="optionMark" Value="{StaticResource LightGreenBrush}"/>
                            <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="templateRoot" Value="0.56"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Fill" TargetName="optionMark" Value="White"/>
                            <Setter Property="Background" TargetName="indeterminateMark" Value="{StaticResource DarkGreenBrush}"/>
                            <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="0.56"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- USED WHEN PATH WITHIN BORDER AND BORDER IS CLICKABLE ITEM-->
    <Style TargetType="{x:Type Path}" x:Key="pathHoverStyle">
        <Style.Triggers>
            <DataTrigger
                    Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Border}}, Path=IsMouseOver}" Value="True" >
                <DataTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <animations:BrushAnimation
                        Storyboard.TargetProperty="Fill"
                        To="{StaticResource TextForegroundLightBrush}" Duration="0:0:0.1">
                            </animations:BrushAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>

                <DataTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <animations:BrushAnimation
                        Storyboard.TargetProperty="Fill"
                       To="{StaticResource TextForegroundDarkerBrush}" Duration="0:0:0.3">
                            </animations:BrushAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.ExitActions>
            </DataTrigger>
        </Style.Triggers>
        <Style.Setters>
            <Setter Property="Fill" Value="{StaticResource TextForegroundDarkerBrush}"/>
        </Style.Setters>
    </Style>


    <Storyboard x:Key="appearTextStoryboard">
        <animations:BrushAnimation
                        Storyboard.TargetProperty="Foreground"
                        To="{StaticResource TextForegroundLightBrush}" Duration="0:0:0.1">
        </animations:BrushAnimation>
    </Storyboard>

    <Storyboard x:Key="fadeTextStoryboard">
        <animations:BrushAnimation 
                        Storyboard.TargetProperty="Foreground"
                       To="{StaticResource TextForegroundDarkerBrush}" Duration="0:0:0.1">
        </animations:BrushAnimation>
    </Storyboard>

    <Style TargetType="{x:Type TextBlock}" x:Key="textblockHoverStyle">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=HasGaze, RelativeSource={RelativeSource AncestorType={x:Type controls:GazeActivableBorder}}}" Value="true">
                <DataTrigger.EnterActions>
                    <RemoveStoryboard BeginStoryboardName="gazeLeaveTextBoxAnimation"/>
                    <RemoveStoryboard BeginStoryboardName="mouseEnterTextBoxAnimation"/>
                    <RemoveStoryboard BeginStoryboardName="mouseLeaveTextBoxAnimation"/>

                    <BeginStoryboard x:Name="gazeEnterTextBoxAnimation" HandoffBehavior="Compose">
                        <Storyboard>
                            <animations:BrushAnimation
                        Storyboard.TargetProperty="Foreground"
                        To="{StaticResource TextForegroundLightBrush}" Duration="0:0:0.1">
                            </animations:BrushAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <RemoveStoryboard BeginStoryboardName="gazeEnterTextBoxAnimation"/>
                    <RemoveStoryboard BeginStoryboardName="mouseEnterTextBoxAnimation"/>
                    <RemoveStoryboard BeginStoryboardName="mouseLeaveTextBoxAnimation"/>

                    <BeginStoryboard x:Name="gazeLeaveTextBoxAnimation" HandoffBehavior="Compose">
                        <Storyboard>
                            <animations:BrushAnimation
                        Storyboard.TargetProperty="Foreground"
                        To="{StaticResource TextForegroundDarkerBrush}" Duration="0:0:0.2">
                            </animations:BrushAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.ExitActions>
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource AncestorType={x:Type controls:GazeActivableBorder}}}" Value="true">
                <DataTrigger.EnterActions>
                    <RemoveStoryboard BeginStoryboardName="gazeLeaveTextBoxAnimation"/>
                    <RemoveStoryboard BeginStoryboardName="gazeEnterTextBoxAnimation"/>
                    <RemoveStoryboard BeginStoryboardName="mouseLeaveTextBoxAnimation"/>

                    <BeginStoryboard x:Name="mouseEnterTextBoxAnimation" HandoffBehavior="Compose">
                        <Storyboard>
                            <animations:BrushAnimation
                        Storyboard.TargetProperty="Foreground"
                        To="{StaticResource TextForegroundLightBrush}" Duration="0:0:0.1">
                            </animations:BrushAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <RemoveStoryboard BeginStoryboardName="gazeEnterTextBoxAnimation"/>
                    <RemoveStoryboard BeginStoryboardName="gazeEnterTextBoxAnimation"/>
                    <RemoveStoryboard BeginStoryboardName="mouseEnterTextBoxAnimation"/>

                    <BeginStoryboard x:Name="mouseLeaveTextBoxAnimation" HandoffBehavior="Compose">
                        <Storyboard>
                            <animations:BrushAnimation
                        Storyboard.TargetProperty="Foreground"
                        To="{StaticResource TextForegroundDarkerBrush}" Duration="0:0:0.2">
                            </animations:BrushAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.ExitActions>
            </DataTrigger>

        </Style.Triggers>
        <Style.Setters>
            <Setter Property="Foreground" Value="{StaticResource TextForegroundDarkerBrush}"/>
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
            <Setter Property="TextWrapping" Value="Wrap"/>
            <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, 
                                Path=Text}"/>
            <Setter Property="ToolTipService.InitialShowDelay" Value="1000"/>
            <Setter Property="FontSize" Value="14"/>
        </Style.Setters>
    </Style>

    
    
    <Style TargetType="{x:Type Image}" x:Key="imageHoverStyle">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=HasGaze, RelativeSource={RelativeSource AncestorType={x:Type controls:GazeActivableBorder}}}" Value="true">
                <DataTrigger.EnterActions>
                    <RemoveStoryboard BeginStoryboardName="gazeLeaveAnimation"/>
                    <RemoveStoryboard BeginStoryboardName="mouseEnterAnimation"/>
                    <RemoveStoryboard BeginStoryboardName="mouseLeaveAnimation"/>

                    <BeginStoryboard x:Name="gazeEnterAnimation">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.1"/>
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <RemoveStoryboard BeginStoryboardName="gazeEnterAnimation"/>
                    <RemoveStoryboard BeginStoryboardName="mouseEnterAnimation"/>
                    <RemoveStoryboard BeginStoryboardName="mouseLeaveAnimation"/>

                    <BeginStoryboard x:Name="gazeLeaveAnimation">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.5" Duration="0:0:0.2"/>
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.ExitActions>
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource AncestorType={x:Type controls:GazeActivableBorder}}}" Value="true">
                <DataTrigger.EnterActions>
                    <RemoveStoryboard BeginStoryboardName="gazeLeaveAnimation"/>
                    <RemoveStoryboard BeginStoryboardName="gazeEnterAnimation"/>
                    <RemoveStoryboard BeginStoryboardName="mouseLeaveAnimation"/>

                    <BeginStoryboard x:Name="mouseEnterAnimation">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.1"/>
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <RemoveStoryboard BeginStoryboardName="gazeEnterAnimation"/>
                    <RemoveStoryboard BeginStoryboardName="gazeEnterAnimation"/>
                    <RemoveStoryboard BeginStoryboardName="mouseEnterAnimation"/>

                    <BeginStoryboard x:Name="mouseLeaveAnimation">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.5" Duration="0:0:0.2"/>
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.ExitActions>
            </DataTrigger>
        </Style.Triggers>
        <Style.Setters>
            <Setter Property="Opacity" Value="0.5"/>
        </Style.Setters>
    </Style>
    
    <!--MAIN BORDER HOVER STYLE-->
    <Style TargetType="{x:Type Border}" x:Key="MainBorderHoverStyle">
        <Style.Setters>
            <Setter Property="BorderBrush" Value="Black"/>
            <Setter Property="BorderThickness" Value="1"/>
        </Style.Setters>
        <Style.Triggers>
            <DataTrigger 
                    Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" >
                <DataTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <animations:BrushAnimation
                        Storyboard.TargetProperty="BorderBrush"
                        To="{StaticResource LightGreenBrush}" Duration="0:0:0.1">
                            </animations:BrushAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>

                <DataTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <animations:BrushAnimation
                        Storyboard.TargetProperty="BorderBrush"
                       To="Black" Duration="0:0:0.3">
                            </animations:BrushAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.ExitActions>
            </DataTrigger>
        </Style.Triggers>
    </Style>


    <!--CONTROLS -->

    <Style x:Key="WindowButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{DynamicResource ForegroundColorBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter x:Name="contentPresenter"
                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                          Margin="{TemplateBinding Padding}"
                          RecognizesAccessKey="True" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{StaticResource DarkGreenBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ApplicationBackgroundDarkBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="contentPresenter" Property="Opacity" Value=".5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="WindowCloseButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{DynamicResource ForegroundColorBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter x:Name="contentPresenter"
                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                          Margin="{TemplateBinding Padding}"
                          RecognizesAccessKey="True" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="Red" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="Red" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="contentPresenter" Property="Opacity" Value=".5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MainWindowStyle" TargetType="controls:CustomMainWindow">
        <Setter Property="Foreground" Value="{DynamicResource ForegroundColorBrush}" />
        <Setter Property="Background" Value="{StaticResource ApplicationBackgroundSemiDarkBrush}"/>
        <Setter Property="ResizeMode" Value="CanResizeWithGrip" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="WindowStyle" Value="None"/>
        <Setter Property="AllowsTransparency" Value="False"/>
        <Setter Property="TextOptions.TextFormattingMode" Value="Display" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:CustomMainWindow">
                    <Border x:Name="WindowBorder" Margin="{Binding Source={x:Static SystemParameters.WindowNonClientFrameThickness}}" Background="{StaticResource ApplicationBackgroundSemiDarkBrush}">
                        <Grid>
                            <Border  x:Name="testBorder" BorderThickness="1" >
                                <AdornerDecorator>
                                    <Grid x:Name="LayoutRoot">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="32" />
                                            <RowDefinition Height="*" />
                                            <RowDefinition Height="15" />
                                        </Grid.RowDefinitions>
                                        <ContentPresenter Grid.Row="1" Grid.RowSpan="2"/>
                                        <Grid VerticalAlignment="Top" Grid.Row="0" Height="0" x:Name="TitleGrid">
                                            <Grid.Triggers>
                                                <EventTrigger RoutedEvent="Ellipse.Loaded">
                                                    <EventTrigger.Actions>
                                                        <BeginStoryboard>
                                                            <Storyboard>
                                                                <DoubleAnimation  BeginTime="0:0:0:1.5" Duration="0:0:0:0.6" From="0" To="32" Storyboard.TargetName="TitleGrid" Storyboard.TargetProperty="Height" >
                                                                    <DoubleAnimation.EasingFunction>
                                                                        <QuadraticEase EasingMode="EaseOut" />
                                                                    </DoubleAnimation.EasingFunction>
                                                                </DoubleAnimation>
                                                            </Storyboard>
                                                        </BeginStoryboard>
                                                    </EventTrigger.Actions>
                                                </EventTrigger>
                                            </Grid.Triggers>
                                            <Border  Background="Black" x:Name="titleBarBorder" Height="32" VerticalAlignment="Top" BorderBrush="#AA000000"  BorderThickness="0,0,0,1"/>

                                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Top" WindowChrome.IsHitTestVisibleInChrome="True" Grid.Row="0">
                                                <Button Command="{Binding Source={x:Static SystemCommands.MinimizeWindowCommand}}" ToolTip="minimize" Style="{StaticResource WindowButtonStyle}">
                                                    <Button.Content>
                                                        <Grid Width="30" Height="32" RenderTransform="1,0,0,1,0,1">
                                                            <Path Data="M0,6 L8,6 Z" Width="8" Height="7" VerticalAlignment="Center" HorizontalAlignment="Center"
                                                        Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Button}}" StrokeThickness="2"  />
                                                        </Grid>
                                                    </Button.Content>
                                                </Button>
                                                <Grid Margin="1,0,1,0">
                                                    <Button x:Name="Restore" Command="{Binding Source={x:Static SystemCommands.RestoreWindowCommand}}" Visibility="Collapsed" Style="{StaticResource WindowButtonStyle}">
                                                        <Button.Content>
                                                            <Grid Width="30" Height="32" UseLayoutRounding="True" RenderTransform="1,0,0,1,.5,.5">
                                                                <Path Data="M2,0 L8,0 L8,6 M0,3 L6,3 M0,2 L6,2 L6,8 L0,8 Z" Width="8" Height="8" VerticalAlignment="Center" HorizontalAlignment="Center"
                                                            Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Button}}" StrokeThickness="1"  />
                                                            </Grid>
                                                        </Button.Content>
                                                    </Button>
                                                    <Button x:Name="Maximize" Command="{Binding Maximize}" Style="{StaticResource WindowButtonStyle}">
                                                        <Button.Content>
                                                            <Grid Width="31" Height="32">
                                                                <Path Data="M0,1 L9,1 L9,8 L0,8 Z" Width="9" Height="8" VerticalAlignment="Center" HorizontalAlignment="Center"
                                                            Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Button}}" StrokeThickness="2"  />
                                                            </Grid>
                                                        </Button.Content>
                                                    </Button>
                                                </Grid>
                                                <Button Command="{Binding Source={x:Static SystemCommands.CloseWindowCommand}}" Style="{StaticResource WindowCloseButtonStyle}">
                                                    <Button.Content>
                                                        <Grid Width="30" Height="32" RenderTransform="1,0,0,1,0,1">
                                                            <Path Data="M0,0 L8,7 M8,0 L0,7 Z" Width="8" Height="7" VerticalAlignment="Center" HorizontalAlignment="Center"
                                                        Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Button}}" StrokeThickness="1.5"  />
                                                        </Grid>
                                                    </Button.Content>
                                                </Button>
                                            </StackPanel>
                                            <WrapPanel Grid.Row="0" HorizontalAlignment="Left" Margin="5 -1 0 0" Width="750">
                                                <Image Source="pack://application:,,,/logoTransparent4.ico" UseLayoutRounding="True" SnapsToDevicePixels="True" Height="32" RenderOptions.EdgeMode="Aliased" RenderOptions.BitmapScalingMode="HighQuality" VerticalAlignment="Bottom"/>
                                                <TextBlock x:Name="WindowTitleTextBlock" Grid.Row="0" Text="{TemplateBinding Title}" HorizontalAlignment="Left" TextTrimming="CharacterEllipsis" VerticalAlignment="Center" FontWeight="SemiBold"  Margin="10 -1 0 0"  FontSize="16" Width="700"  Foreground="{TemplateBinding Foreground}"/>
                                            </WrapPanel>
                                            
                                        </Grid>

                                        <Grid Grid.Row="2">
                                            <Path x:Name="ResizeGrip" Visibility="Collapsed" Width="12" Height="12" Margin="1" HorizontalAlignment="Right"
                                        Stroke="{StaticResource LightGreenBrush}" StrokeThickness="1" Stretch="None" Data="F1 M1,10 L3,10 M5,10 L7,10 M9,10 L11,10 M2,9 L2,11 M6,9 L6,11 M10,9 L10,11 M5,6 L7,6 M9,6 L11,6 M6,5 L6,7 M10,5 L10,7 M9,2 L11,2 M10,1 L10,3" />
                                        </Grid>
                                    </Grid>
                                </AdornerDecorator>
                            </Border>
                            <Border x:Name="ApplicationBorderFrame" BorderBrush="Gray" BorderThickness="3" Visibility="{Binding IsActive, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Converter={StaticResource BoolToVisibilityInvertedConverter}}" />

                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter TargetName="Maximize" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Restore" Property="Visibility" Value="Visible" />
                            <Setter TargetName="LayoutRoot" Property="Margin" Value="7" />
                        </Trigger>
                        <Trigger Property="WindowState" Value="Normal">
                            <Setter TargetName="Maximize" Property="Visibility" Value="Visible" />
                            <Setter TargetName="Restore" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ResizeMode" Value="CanResizeWithGrip" />
                                <Condition Property="WindowState" Value="Normal" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ResizeGrip" Property="Visibility" Value="Visible" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome CornerRadius="0" GlassFrameThickness="0" UseAeroCaptionButtons="True"/>
            </Setter.Value>
        </Setter>
    </Style>
    
    
    <!-- ADDRESS BAR TEXTBOX -->
    <Style x:Key="MainTextBoxStyle" TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="#222629"/>
        <Setter Property="Foreground" Value="{StaticResource TextForegroundDarkerBrush}"/>
        <Setter Property="BorderBrush" Value="#80000000"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="0,0,2,2"/>
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="CaretBrush" Value="{StaticResource TextForegroundDarkerBrush}"/>
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <DockPanel LastChildFill="True">
                        <Border  BorderBrush="Red" BorderThickness="2">
                            <AdornedElementPlaceholder Name="MyAdorner" />
                        </Border>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- INPUT TEXTBOX-->
    
    <ControlTemplate x:Key="TextBoxTemplateBase" TargetType="{x:Type TextBox}">
        <Grid x:Name="root" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}">
            <!-- managing visual states to change controls styles on different states -->
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal">
                        <Storyboard>
                            <DoubleAnimation BeginTime="00:00:00.000" Duration="00:00:00.500"
                                             From="1" To="0"
                                             Storyboard.TargetProperty="Opacity"
                                             Storyboard.TargetName="hoverBorder"/>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <DoubleAnimation BeginTime="00:00:00.000" Duration="00:00:00.500"
                                             From="0" To="1"
                                             Storyboard.TargetProperty="Opacity"
                                             Storyboard.TargetName="hoverBorder"/>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="normalBorder"
                                                          Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)">
                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource ControlDisabledBackground}" />
                            </ColorAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="normalBorder"
                                                          Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource ControlDisabledBorder}" />
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="ReadOnly">
                        <Storyboard>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="normalBorder"
                                                          Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)">
                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource ControlReadOnlyBackground}" />
                            </ColorAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="normalBorder"
                                                          Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource ControlReadOnlyBorder}" />
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="FocusStates">
                    <VisualState x:Name="Focused">
                        <Storyboard>
                            <DoubleAnimation BeginTime="00:00:00.000" Duration="00:00:00.300"
                                             From="0" To="1"
                                             Storyboard.TargetProperty="Opacity"
                                             Storyboard.TargetName="focusBorder"/>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Unfocused">
                        <Storyboard>
                            <DoubleAnimation BeginTime="00:00:00.000" Duration="00:00:00.700"
                                             From="1" To="0"
                                             Storyboard.TargetProperty="Opacity"
                                             Storyboard.TargetName="focusBorder"/>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>

            <Border x:Name="normalBorder" 
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"/>

            <Border x:Name="hoverBorder" Opacity="0"
                    BorderThickness="{TemplateBinding BorderThickness}">
                <Border.BorderBrush>
                    <SolidColorBrush Color="{StaticResource ControlHoveredBorder}"/>
                </Border.BorderBrush>
                <Border.Background>
                    <SolidColorBrush Color="{StaticResource ControlHoveredBackground}"/>
                </Border.Background>
            </Border>

            <Border x:Name="focusBorder" Opacity="0"
                    BorderThickness="{TemplateBinding BorderThickness}">
                <Border.BorderBrush>
                    <SolidColorBrush Color="{StaticResource ControlFocusedBorder}"/>
                </Border.BorderBrush>
                <Border.Background>
                    <SolidColorBrush Color="{StaticResource ControlFocusedBackground}"/>
                </Border.Background>
            </Border>

            <ScrollViewer x:Name="PART_ContentHost"
                          Padding="{TemplateBinding Padding}"
                          BorderThickness="0" 
                          IsTabStop="False" 
                          Margin="2" 
                          Background="{x:Null}"
                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                          TextElement.Foreground="{TemplateBinding Foreground}"/>

        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground">
                    <Setter.Value>
                        <SolidColorBrush Color="{StaticResource ControlDisabledForeground}"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsReadOnly" Value="True">
                <Setter Property="Foreground">
                    <Setter.Value>
                        <SolidColorBrush Color="{StaticResource ControlReadOnlyForeground}"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type TextBox}" x:Key="ReadOnlyTextBoxStyle">
        <Style.Setters>
            <Setter Property="CaretBrush" Value="White"/>
            <Setter Property="IsReadOnly" Value="True"/>
            <Setter Property="IsReadOnlyCaretVisible" Value="False"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Foreground" Value="{StaticResource TextForegroundDarkerBrush}"/>
            <Setter Property="BorderBrush" Value="{StaticResource LightGreenBrush}"/>
        </Style.Setters>
        <Style.Triggers>
            
            <DataTrigger Binding="{Binding Path=IsReadOnly, RelativeSource={RelativeSource Self}}" Value="False">
                <Setter Property="Background" Value="{StaticResource ApplicationBackgroundNormalBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource TextForegroundLightBrush}"/>
            </DataTrigger>


            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property ="BorderBrush" Value="Yellow"/>
            </Trigger>

            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="Yellow" />
            </Trigger>

        </Style.Triggers>
    </Style>

    <!-- TEXTBLOCK STYLE-->
    <Style x:Key="TextBlockBaseStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="Foreground" Value="WhiteSmoke"/>
    </Style>


    <Style x:Key="PathWithinButtonWithGazeStyle" TargetType="{x:Type Path}">
        <Setter Property="Fill" Value="{StaticResource TextForegroundDarkerBrush}"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=HasGaze, RelativeSource={RelativeSource AncestorType={x:Type controls:GazeActivableButton}}}" Value="true">
                <Setter Property="Fill" Value="{StaticResource TextForegroundLightBrush}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource AncestorType={x:Type Canvas}}}" Value="true">
                <Setter Property="Fill" Value="{StaticResource TextForegroundLightBrush}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    
    <!-- PATH STYLE-->
    <Style x:Key="PathWithinButtonStyle" TargetType="{x:Type Path}">
        <Style.Triggers>
            <!--<DataTrigger  Binding="{Binding Path=IsEnabled,
                                     RelativeSource={RelativeSource
                                     AncestorType={x:Type Button}}}" Value="False">
                <Setter Property="Fill" Value="{StaticResource TextForegroundDisabledBrush}"/>
            </DataTrigger>-->

            <!--<MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsMouseOver,
                                     RelativeSource={RelativeSource
                                     AncestorType={x:Type Button}}}" Value="False" />
                    <Condition Binding="{Binding Path=IsEnabled,
                                     RelativeSource={RelativeSource
                                     AncestorType={x:Type Button}}}" Value="False" />
                </MultiDataTrigger.Conditions>

                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <animations:BrushAnimation Duration="0:0:0.1" Storyboard.TargetProperty="Fill" To="{StaticResource TextForegroundDisabledBrush}"/>
                        </Storyboard>
                    </BeginStoryboard>
                </MultiDataTrigger.EnterActions>
            </MultiDataTrigger>
            

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsMouseOver,
                                     RelativeSource={RelativeSource
                                     AncestorType={x:Type Button}}}" Value="True" />
                    <Condition Binding="{Binding Path=IsEnabled,
                                     RelativeSource={RelativeSource
                                     AncestorType={x:Type Button}}}" Value="False" />
                </MultiDataTrigger.Conditions>

                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <animations:BrushAnimation Duration="0:0:0.1" Storyboard.TargetProperty="Fill" To="{StaticResource TextForegroundDisabledBrush}"/>
                        </Storyboard>
                    </BeginStoryboard>
                </MultiDataTrigger.EnterActions>
            </MultiDataTrigger>-->
            
            <DataTrigger  Binding="{Binding Path=IsEnabled,
                                     RelativeSource={RelativeSource
                                     AncestorType={x:Type Button}}}" Value="True">
                <Setter Property="Fill" Value="{StaticResource TextForegroundDarkerBrush}"/>
            </DataTrigger>

            <DataTrigger  Binding="{Binding Path=IsEnabled,
                                     RelativeSource={RelativeSource
                                     AncestorType={x:Type Button}}}" Value="False">
                <Setter Property="Fill" Value="{StaticResource TextForegroundDisabledBrush}"/>
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsMouseOver,
                                     RelativeSource={RelativeSource
                                     AncestorType={x:Type Canvas}}}" Value="True" />
                    <Condition Binding="{Binding Path=IsEnabled,
                                     RelativeSource={RelativeSource
                                     AncestorType={x:Type Button}}}" Value="True" />
                </MultiDataTrigger.Conditions>

                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard x:Name="MouseOverEnabledStoryboard">
                        <Storyboard>
                            <animations:BrushAnimation Duration="0:0:0.1" Storyboard.TargetProperty="Fill" To="{StaticResource TextForegroundLightBrush}"/>
                        </Storyboard>
                    </BeginStoryboard>
                </MultiDataTrigger.EnterActions>

                <MultiDataTrigger.ExitActions>
                    <RemoveStoryboard BeginStoryboardName="MouseOverEnabledStoryboard"/>
                </MultiDataTrigger.ExitActions>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsMouseOver,
                                     RelativeSource={RelativeSource
                                     AncestorType={x:Type Canvas}}}" Value="False" />
                    <Condition Binding="{Binding Path=IsEnabled,
                                     RelativeSource={RelativeSource
                                     AncestorType={x:Type Button}}}" Value="True" />
                </MultiDataTrigger.Conditions>

                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard x:Name="MouseNotOverEnabledStoryboard">
                        <Storyboard>
                            <animations:BrushAnimation Duration="0:0:0.1" Storyboard.TargetProperty="Fill" To="{StaticResource TextForegroundDarkerBrush}"/>
                        </Storyboard>
                    </BeginStoryboard>
                </MultiDataTrigger.EnterActions>

                <MultiDataTrigger.ExitActions>
                    <RemoveStoryboard BeginStoryboardName="MouseNotOverEnabledStoryboard"/>
                </MultiDataTrigger.ExitActions>
            </MultiDataTrigger>

        </Style.Triggers>
    </Style>
    
    <!-- EMPTY CONTROLS STYLES -->
    <Style x:Key="EmptyButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <ContentPresenter Content="{TemplateBinding Content}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="EmptyToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <ContentPresenter Content="{TemplateBinding Content}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- SCROLLBAR STYLE-->

    <Style x:Key="__ScrollBarLineButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border
                        Name="Border"
                        Margin="0"
                        Background="Transparent"
                        BorderBrush="{StaticResource DarkGreenBrush}"
                        BorderThickness="0"
                        CornerRadius="0">
                        <Path
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Data="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}"
                            Fill="{StaticResource DarkGreenBrush}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource ApplicationBackgroundLightBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource TextForegroundDisabledBrush}" />
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" Value="{StaticResource LightGreenBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="__ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Transparent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="__ScrollBarThumb" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="0"
                        CornerRadius="0" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="__VerticalScrollBar" TargetType="{x:Type ScrollBar}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition MaxHeight="18" />
                <RowDefinition Height="0.00001*" />
                <RowDefinition MaxHeight="38" />
            </Grid.RowDefinitions>
            <Border
                Grid.RowSpan="3"
                Background="{TemplateBinding Background}"
                CornerRadius="0" />
            <RepeatButton
                Grid.Row="0"
                Height="18"
                Command="ScrollBar.LineUpCommand"
                Content="M 0 4 L 4 0 L 8 4 Z"
                Style="{StaticResource __ScrollBarLineButton}" />
            <Track
                Name="PART_Track"
                Grid.Row="1"
                IsDirectionReversed="true">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Command="ScrollBar.PageUpCommand" Style="{StaticResource __ScrollBarPageButton}" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb
                        x:Name="scrollThumb"
                        Margin="0 0 0 0"
                        Background="Black"
                        Style="{StaticResource __ScrollBarThumb}" >
                        <Thumb.Triggers>
                            <EventTrigger RoutedEvent="Border.MouseEnter">
                                <EventTrigger.Actions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <animations:BrushAnimation  Duration="0:0:0:0.2"  To="{StaticResource DarkGreenBrush}" Storyboard.TargetProperty="Background"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger.Actions>
                            </EventTrigger>

                            <EventTrigger RoutedEvent="Border.MouseLeave">
                                <EventTrigger.Actions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <animations:BrushAnimation  Duration="0:0:0:0.2"  To="Black" Storyboard.TargetProperty="Background"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger.Actions>
                            </EventTrigger>
                        </Thumb.Triggers>
                    </Thumb>

                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Command="ScrollBar.PageDownCommand" Style="{StaticResource __ScrollBarPageButton}" />
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton
                Margin="0,0,0,20"
                Grid.Row="2"
                Height="18"
                Command="ScrollBar.LineDownCommand"
                Content="M 0 0 L 4 4 L 8 0 Z"
                Style="{StaticResource __ScrollBarLineButton}" />
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="__HorizontalScrollBar" TargetType="{x:Type ScrollBar}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition MaxWidth="18" />
                <ColumnDefinition Width="0.00001*" />
                <ColumnDefinition MaxWidth="38" />
            </Grid.ColumnDefinitions>
            <Border
                Grid.ColumnSpan="3"
                Background="Transparent"
                CornerRadius="0" />
            <RepeatButton
                Grid.Column="0"
                Width="18"
                Command="ScrollBar.LineLeftCommand"
                Content="M 4 0 L 4 8 L 0 4 Z"
                Style="{StaticResource __ScrollBarLineButton}" />
            <Track
                Name="PART_Track"
                Grid.Column="1"
                IsDirectionReversed="False">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Command="ScrollBar.PageLeftCommand" Style="{StaticResource __ScrollBarPageButton}" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb
                        Margin="0 0 0 0"
                        Background="{StaticResource ApplicationBackgroundSemiDarkBrush}"
                        Style="{StaticResource __ScrollBarThumb}" >
                        <Thumb.Triggers>
                            <EventTrigger RoutedEvent="Border.MouseEnter">
                                <EventTrigger.Actions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <animations:BrushAnimation  Duration="0:0:0:0.2"  To="{StaticResource DarkGreenBrush}" Storyboard.TargetProperty="Background"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger.Actions>
                            </EventTrigger>

                            <EventTrigger RoutedEvent="Border.MouseLeave">
                                <EventTrigger.Actions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <animations:BrushAnimation  Duration="0:0:0:0.2"  To="{StaticResource ApplicationBackgroundSemiDarkBrush}" Storyboard.TargetProperty="Background"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger.Actions>
                            </EventTrigger>
                        </Thumb.Triggers>
                    </Thumb>

                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Command="ScrollBar.PageRightCommand" Style="{StaticResource __ScrollBarPageButton}" />
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton
                Margin="0,0,20,0"
                Grid.Column="2"
                Width="18"
                Command="ScrollBar.LineRightCommand"
                Content="M 0 0 L 4 4 L 0 8 Z"
                Style="{StaticResource __ScrollBarLineButton}" />
        </Grid>
    </ControlTemplate>

    <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Width" Value="10" />
                <Setter Property="Height" Value="Auto" />
                <Setter Property="Template" Value="{StaticResource __VerticalScrollBar}" />
            </Trigger>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto" />
                <Setter Property="Height" Value="10" />
                <Setter Property="Template" Value="{StaticResource __HorizontalScrollBar}" />
            </Trigger>
            
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="Orientation" Value="Vertical"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.EnterActions>
                    <BeginStoryboard x:Name="scrollBarMouseOverBegin">
                        <Storyboard>
                            <DoubleAnimation From="10" To="15" Storyboard.TargetProperty="Width" Duration="0:0:0.2"/>
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.EnterActions>
                <MultiTrigger.ExitActions>
                    <RemoveStoryboard BeginStoryboardName="scrollBarMouseOverBegin"/>
                </MultiTrigger.ExitActions>
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="False"/>
                    <Condition Property="Orientation" Value="Vertical"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.EnterActions>
                    <BeginStoryboard x:Name="scrollBarMouseNotOverBegin">
                        <Storyboard>
                            <DoubleAnimation From="15" To="10" Storyboard.TargetProperty="Width" Duration="0:0:0.2"/>
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.EnterActions>
                <MultiTrigger.ExitActions>
                    <RemoveStoryboard BeginStoryboardName="scrollBarMouseNotOverBegin"/>
                </MultiTrigger.ExitActions>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!---BUTTON-->
    <Style x:Key="ButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle SnapsToDevicePixels="true" Stroke="White" StrokeThickness="1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MainButtonStyle" TargetType="{x:Type controls:GazeActivableButton}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource ApplicationBackgroundDarkBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ApplicationBackgroundNormalBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource ForegroundColorBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:GazeActivableButton}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasGaze" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource LightGreenBrush}"/>
                        </Trigger>
                        <Trigger Property="IsDefault" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource DarkGreenBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource LightGreenBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource LightGreenBrush}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="White"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource ApplicationBackgroundDarkBrush}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="Gray"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="Gray"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--COMOBOBOX STYLE-->
    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid Height="23">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="Border">
                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource LightGreenColor}" />
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed" />
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="Border">
                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource TextForegroundDisabledColor}" />
                            </ColorAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="Arrow">
                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource TextForegroundDisabledColor}" />
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="CheckStates">
                    <VisualState x:Name="Checked">
                        <Storyboard>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="Border">
                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource LightGreenColor}" />
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Unchecked" />
                    <VisualState x:Name="Indeterminate" />
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border x:Name="Border" Grid.ColumnSpan="2" Background="{StaticResource ApplicationBackgroundLightBrush}"/>
            <Border Grid.Column="0" Margin="1" BorderThickness="1" Background="{StaticResource ApplicationBackgroundDarkBrush}"/>
            <Path x:Name="Arrow"
                  Grid.Column="1"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Data="M 0 0 L 4 4 L 8 0 Z"
                  Fill="{StaticResource TextForegroundLightBrush}"/>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
        <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}" />
    </ControlTemplate>

    <Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="MinWidth" Value="100" />
        <Setter Property="MinHeight" Value="20" />
        <Setter Property="SelectedIndex" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver" />
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="PART_EditableTextBox"
                                                Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{DynamicResource TextForegroundDisabledColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="EditStates">
                                <VisualState x:Name="Editable">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="PART_EditableTextBox">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="ContentSite">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Hidden}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Uneditable" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ToggleButton x:Name="ToggleButton"
                                        Template="{StaticResource ComboBoxToggleButton}"
                                        Grid.Column="2"
                                        Focusable="false"
                                        ClickMode="Press"
                                        IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <TextBlock Text="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ComboBox}}, Path=SelectedItem}" IsHitTestVisible="False" FontSize="14" Margin="5,3,23,3" VerticalAlignment="Center" x:Name="ContentSite" Foreground="{StaticResource TextForegroundLightBrush}"/>
                        <TextBox x:Name="PART_EditableTextBox"
                                   Style="{x:Null}"
                                   Template="{StaticResource ComboBoxTextBox}"
                                   HorizontalAlignment="Left"
                                   VerticalAlignment="Bottom"
                                   Margin="3,3,23,3"
                                   Focusable="True"
                                   Background="Transparent"
                                   Foreground="{StaticResource TextForegroundLightBrush}"
                                   Visibility="Hidden"
                                   IsReadOnly="{TemplateBinding IsReadOnly}" />
                        <Popup x:Name="Popup"
                                Placement="Top"
                                IsOpen="{TemplateBinding IsDropDownOpen}"
                                AllowsTransparency="True"
                                Focusable="False"
                                PopupAnimation="Slide">
                            <Grid x:Name="DropDown" SnapsToDevicePixels="True" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border x:Name="DropDownBorder" BorderThickness="1" Background="{StaticResource ApplicationBackgroundLightBrush}" BorderBrush="{StaticResource ApplicationBackgroundNormalBrush}"/>
                                <ScrollViewer Margin="1,3,1,1" SnapsToDevicePixels="True">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll"  Value="false" />
                        </Trigger>
                        <Trigger SourceName="Popup" Property="AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border x:Name="Border" Padding="5" SnapsToDevicePixels="true" Background="Transparent">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <animations:BrushAnimation Storyboard.TargetProperty="(Panel.Background)" Duration="00:00:0.1" Storyboard.TargetName="Border" To="{StaticResource DarkGreenBrush}"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed" />
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="Border">
                                            <EasingColorKeyFrame KeyTime="0" Value="{DynamicResource TextForegroundDisabledColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="Arrow">
                                            <EasingColorKeyFrame KeyTime="0" Value="{DynamicResource TextForegroundDisabledColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="SelectionStates">
                                <VisualState x:Name="Unselected" />
                                <VisualState x:Name="Selected">
                                    <Storyboard>
                                        <animations:BrushAnimation Storyboard.TargetProperty="(Panel.Background)" Duration="00:00:0.0" Storyboard.TargetName="Border" To="{StaticResource DarkGreenBrush}"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="SelectedUnfocused">
                                    <Storyboard>
                                        <animations:BrushAnimation Storyboard.TargetProperty="(Panel.Background)" Duration="00:00:0.0" Storyboard.TargetName="Border" To="{StaticResource DarkGreenBrush}"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ContentPresenter>
                            <ContentPresenter.ContentTemplate>
                                <DataTemplate>
                                    <TextBlock x:Name="ItemTextBox" FontSize="13" Text="{Binding}"/>
                                </DataTemplate>
                            </ContentPresenter.ContentTemplate>
                        </ContentPresenter>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--ICONS-->

    <DrawingImage x:Key="FolderIcon" PresentationOptions:Freeze="True">
        <DrawingImage.Drawing>

            <GeometryDrawing Brush="Transparent" Geometry="F1 M 21,30.0001L 55.9999,30.0001L 55.9999,50L 21,50L 21,30.0001 Z M 52,28L 37,28C 38,25 39.4999,24.0001 39.4999,24.0001L 50.75,24C 51.3023,24 52,24.6977 52,25.25L 52,28 Z ">
                <GeometryDrawing.Pen>
                    <Pen Brush="#FF939393" Thickness="1"/>
                </GeometryDrawing.Pen>
            </GeometryDrawing>

        </DrawingImage.Drawing>
    </DrawingImage>

    
    <!-- LOADING INDICATOR -->
    <Style x:Key="LoadingIndicatorArcsStyle" TargetType="{x:Type controls:LoadingIndicator}">
        <Setter Property="Foreground" Value="{StaticResource LightGreenBrush}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="Width" Value="40"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:LoadingIndicator}">
                    <Border x:Name="PART_Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="SizeStates">
                                <VisualState x:Name="Large" />
                                <VisualState x:Name="Small" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ActiveStates">
                                <VisualState x:Name="Inactive"/>
                                <VisualState x:Name="Active">
                                    <Storyboard SpeedRatio="{TemplateBinding SpeedRatio}">
                                        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" Storyboard.TargetName="PART_Canvas0" Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)">
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0"/>
                                            <LinearDoubleKeyFrame KeyTime="0:0:3.000" Value="360"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" Storyboard.TargetName="PART_Canvas1" Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)">
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0"/>
                                            <LinearDoubleKeyFrame KeyTime="0:0:2.000" Value="-360"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <Border.Resources>
                            <Style TargetType="{x:Type Canvas}">
                                <Setter Property="RenderTransformOrigin" Value="0.5,0.5"/>
                                <Setter Property="RenderTransform">
                                    <Setter.Value>
                                        <RotateTransform/>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </Border.Resources>

                        <Grid Background="Transparent">
                            <Grid.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="0.5" ScaleY="0.5"/>
                                    <TranslateTransform X="10" Y="10"/>
                                </TransformGroup>
                            </Grid.RenderTransform>
                            <Canvas x:Name="PART_Canvas0" Opacity="1.0">
                                <Path Stroke="{TemplateBinding Foreground}" StrokeThickness="10">
                                    <Path.Data>
                                        <PathGeometry>
                                            <PathGeometry.Transform>
                                                <TranslateTransform X="20" Y="-20"/>
                                            </PathGeometry.Transform>
                                            <PathGeometry.Figures>
                                                <PathFigureCollection>
                                                    <PathFigure StartPoint="0,0">
                                                        <PathFigure.Segments>
                                                            <PathSegmentCollection>
                                                                <ArcSegment Size="40,40" IsLargeArc="True" SweepDirection="CounterClockwise" Point="40,40" />
                                                            </PathSegmentCollection>
                                                        </PathFigure.Segments>
                                                    </PathFigure>
                                                </PathFigureCollection>
                                            </PathGeometry.Figures>
                                        </PathGeometry>
                                    </Path.Data>
                                </Path>
                            </Canvas>

                            <Canvas x:Name="PART_Canvas1" Opacity="0.3">
                                <Path Stroke="{TemplateBinding Foreground}" StrokeThickness="10">
                                    <Path.Data>
                                        <PathGeometry>
                                            <PathGeometry.Transform>
                                                <TranslateTransform X="-7" Y="7"/>
                                            </PathGeometry.Transform>
                                            <PathGeometry.Figures>
                                                <PathFigureCollection>
                                                    <PathFigure StartPoint="0,0">
                                                        <PathFigure.Segments>
                                                            <PathSegmentCollection>
                                                                <ArcSegment Size="30,30" IsLargeArc="True" SweepDirection="Clockwise" Point="40,40" />
                                                            </PathSegmentCollection>
                                                        </PathFigure.Segments>
                                                    </PathFigure>
                                                </PathFigureCollection>
                                            </PathGeometry.Figures>
                                        </PathGeometry>
                                    </Path.Data>
                                </Path>
                            </Canvas>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>